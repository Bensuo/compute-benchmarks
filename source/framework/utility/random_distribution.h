/*
 * Copyright (C) 2025 Intel Corporation
 *
 * SPDX-License-Identifier: MIT
 *
 */

#pragma once

#include "framework/enum/distribution_kind.h"

#include <memory>
#include <random>

class RandomDistribution {
  public:
    virtual size_t get(std::mt19937 &gen) = 0;

    virtual ~RandomDistribution() {}
};

class UniformDistribution : public RandomDistribution {
  public:
    UniformDistribution(size_t min, size_t max);

    size_t get(std::mt19937 &gen);

  private:
    std::uniform_int_distribution<size_t> distr;
};

// Distribution of log2 of values generated by this distribution is uniform.
// That means that the allocation sizes should be uniformly distributed
// between buckets in a memory pool.
class LogUniformDistribution : public RandomDistribution {
  public:
    LogUniformDistribution(size_t min, size_t max);

    size_t get(std::mt19937 &gen);

  private:
    size_t minValue, maxValue;
    double multiplier;
    std::uniform_real_distribution<double> expotent;
};

// Returns a distribution of a given kind, that returns numbers from [min, max].
std::unique_ptr<RandomDistribution> makeRandomDistribution(DistributionKind kind, size_t min, size_t max);
